name 'avalon_simulation'
version '0.1'

import_types_from 'base'
using_library 'avalon-plugin'
using_library 'marsusim'
using_task_library 'simulation'

task_context "Task" do
	subclasses "simulation::Mars"
	property('scenefile', '/std/string',"#{ENV['AUTOPROJ_PROJECT_BASE']}/simulation/orogen/avalon_simulation/configuration/avalon.scn").
		doc('scenefile of the robot module, which should be loaded')

        #at the moment without gui is not support !!!!       
	property('with_manipulator_gui', 'bool',true).
		doc('scenefile of the robot module, which should be loaded')

        property('initial_x', 'double', 0.0)
        property('initial_y', 'double', 0.0)
        property('initial_z', 'double', 0.0)
        property('initial_yaw', 'double', 0.0)
        property('debug_sonar', 'bool',0)
        property('use_osg_ocean', 'bool',0)

        output_port('auv_position', '/base/Vector3d')

        #sets the position of the auv
        operation('setPosition').
            returns('bool').
            argument('x','double','x').
            argument('y','double','y').
            argument('z','double','z')

        #sets the position of the auv
        operation('setOrientation').
            returns('bool').
            argument('x','double','x').
            argument('y','double','y').
            argument('z','double','z').
            argument('w','double','w')

        operation('setYaw').
            returns('bool').
            argument('yaw', 'double', 'yaw')
end

task_context "BottomCamera" do
	output_port('frame', ro_ptr('base::samples::frame::Frame')).
	  doc('front camera recording')
end

task_context "FrontCamera" do
	output_port('frame', ro_ptr('base::samples::frame::Frame')).
	  doc('front camera recording')
end

task_context "Actuators" do
    input_port("command", "base/actuators/Command").
        doc("actuator command").
        needs_buffered_connection
    output_port("status", "base/actuators/Status")
    port_driven :command
end

task_context "SonarTop" do
        output_port("sonar_beam","base::samples::SonarBeam").
            doc('top sonar beam')
        
        property("start_angle","double",Math::PI)
        property("end_angle","double",-Math::PI)
        property("resolution","double",0.1)
        property("maximum_distance","double",50.0)
        property("ping_pong_mode","bool",false).
            doc('if true ping pong mode is activated')
end

task_context "SonarRear" do
        output_port("sonar_beam","base::samples::SonarBeam").
            doc('rear sonar beam')
        
        property("start_angle","double",0.7*Math::PI)
        property("end_angle","double",0.3*Math::PI)
        property("resolution","double",0.1)
        property("maximum_distance","double",50.0)
        property("ping_pong_mode","bool",true).
            doc('if true ping pong mode is activated')
end

task_context "StateEstimator" do
	output_port('pose_samples', '/base/samples/RigidBodyState').
		doc('computed position in m, in the Simulation coordinate system')
end

deployment "AvalonSimulation" do
	# !!!! Currently these deployments are not being installed! Use avalon/orogen/avalon_simulation_deployment instead !!!!
        do_not_install

	task('avalon_simulation', 'avalon_simulation::Task').
	    periodic(0.1)
        task("bottom_camera_simulation","BottomCamera").
            periodic 0.1
        task("front_camera_simulation","FrontCamera").
            periodic 0.1
        task("sonar_top_simulation","SonarTop").
            periodic 0.066666
        task("sonar_rear_simulation","SonarRear").
            periodic 0.066666
        task("state_estimator_simulation","StateEstimator").
            periodic 0.01
        task("actuators_simulation","Actuators")

	add_default_logger
end

