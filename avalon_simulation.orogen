name 'avalon_simulation'
version '0.1'

import_types_from 'base'
using_task_library 'simulation'

using_library 'avalon-plugin'

task_context "Task" do
	subclasses "simulation::Mars"
	

	property('scenefile', '/std/string',"#{ENV['AUTOPROJ_PROJECT_BASE']}/simulation/orogen/avalon_simulation/configuration/avalon.scn").
		doc('scenefile of the robot module, which should be loaded')

	property('with_manipulator_gui', 'bool').
		doc('scenefile of the robot module, which should be loaded')

	output_port('scans', 'base/samples/LaserScan').
		doc('laser scans of the Hokyo scanner')

	output_port('pose_samples', '/base/samples/RigidBodyState').
		doc('computed position in m, in the Simulation coordinate system')
	
	output_port('front_camera', ro_ptr('base::samples::frame::Frame')).
	  doc('front camera recording')
	  
	output_port('bottom_camera', ro_ptr('base::samples::frame::Frame')).
	  doc('bottom camera recording')
	  
	output_port('sonar_scan', 'base/samples/SonarScan').
	  doc('sonar scan data')

	operation('dispatch').
		doc('creates an output port with a certain set of Hbridge actuator status').
		returns("bool").
		argument('name', 'std::string', "the name of the board set. Ports called status_name and cmd_name (if read_only == false) will be created").
		argument('actuators', '/std/vector</int>', "the set of boards, as a vector of indexes from 0 to BOARD_COUNT").
		argument('read_only', 'bool', 'if true, only an output port is created. If false, a port that allows controlling the boards will be created as well')

	dynamic_input_port(/cmd_\w+/, "base/actuators/Command").
		doc "commands for a set of hbridges set up by #dispatch"
    
    	dynamic_output_port(/status_\w+/, "base/actuators/Status")

end


deployment "testAvalonSimulation" do
	add_default_logger
	# the name here in task, is the 'exported' name, i.e. 
        # in orogen.rb you can identify this task using this name 
	# the 
	# task( <public-name/alias>, <task-context-type>)
	mod = task('avalon_simulation', 'avalon_simulation::Task').
	periodic(0.1)
end

