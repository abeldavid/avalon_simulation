name 'avalon_simulation'
version '0.1'

import_types_from 'base'
import_types_from "avalon_base"
using_library "mars_utils", :typekit => false
using_library "mars_interfaces", :typekit => false
using_library 'avalon-plugin'
using_library 'marsusim'
using_library 'mars_sim'
using_task_library "avalon_control"
using_task_library "raw_control_command_converter"
using_task_library "buoy"
using_task_library "offshore_pipeline_detector"
using_task_library "wall_servoing"
using_task_library "sonar_feature_estimator"
# using_task_library "ekf_slam"
# using_task_library "eras_position_estimator"
using_task_library "sonar_wall_hough"
#using_task_library "uwv_dynamic_model"
using_task_library "uw_particle_localization"
using_task_library "auv_waypoint_navigator"
using_task_library "asv_detector"
using_task_library "pingersearch"
using_task_library "auv_rel_pos_controller"
using_task_library "controldev"
using_task_library 'simulation'
using_task_library 'task_scheduler'
using_task_library 'auv_control'

#task_context "Task" do
#	subclasses "simulation::Mars"
#	property('scenefile', '/std/string',"#{ENV['AUTOPROJ_PROJECT_BASE']}/simulation/orogen/avalon_simulation/configuration/avalon.scn").
#		doc('scenefile of the robot module, which should be loaded')
#
#        #at the moment without gui is not support !!!!       
#	property('with_manipulator_gui', 'bool',true).
#		doc('scenefile of the robot module, which should be loaded')
#
#        property('initial_x', 'double', 0.0)
#        property('initial_y', 'double', 0.0)
#        property('initial_z', 'double', 0.0)
#        property('initial_yaw', 'double', 0.0)
#        property('debug_sonar', 'bool',0)
#        
#        #osgOcean Part:
#        property('use_osg_ocean', 'bool',0)
#        property('waveScale','double')
#        property('windSpeed','double')
#        property('endlessOcean','bool')
#        property('oceanHeight','double')
#        property('goodRays','bool')
#        property('silt','bool')
#        property('glare','bool')
#        property('glareThreashold','double')
#        property('distortion','bool')
#        property('scattering','bool')
#        property('fogDensity','double')
#        property('fogColor','/base/Vector4d')
#        property('diffuse','/base/Vector4d')
#        property('attenuation','/base/Vector3d')
#        
#        property('remove_buoy','bool')
#
#        operation('setPipelinePosition').
#          argument('x','double','x').
#          argument('y','double','y').
#          argument('z','double','z')
#end

task_context "Microphones" do
	subclasses "simulation::MarsPlugin"
	
	
    output_port "stereo_output", "/avalon/AudioSamples"
    output_port "ping_output", "/avalon/AudioSamples"
    output_port "angle_to_asv_output", "/base/Angle"

    property("sound_velocity","double",1500).
        doc("Current Setting of sound_velocity")
        
    property("base_line","double",1.5).
        doc("Distance between the microphones")
    
    property("pinger_frequency","double",12000).
        doc("Current Setting of pinger frequency in Hz")
        
    property("carrier_frequency","double",2000).
        doc("Current Setting of noise frequency in Hz")        
        
    property("white_noise","bool", true).
        doc("insert white noise in pinger signal")
        
    property("carrier_wave","bool", false).
        doc("insert carrierWave in pinger signal")
        
    property("carrier_amplitude","double", 1.5).
        doc("changes amplitude of the white noise")    
        
    property("startFrame","unsigned", 1500).
        doc("frame where ping starts") 
   
    property("noise_amplitude","double", 0.4).
        doc("changes amplitude of the white noise")
   
    property("amplitude","double", 1.0).
        doc("changes amplitude of the Ping") 
     
    property("sample_rate","double", 44100.0).
        doc("sample rate for signal")           

    property('ping_length', 'int', 10).
	    doc('ping_length in ms')

    property('node_name', '/std/string', 'avalon').
	    doc('name of the nodeid the scene file, which should be handled as a acoustic target')

    property('angle_offset',"base::Angle")

end

task_context "PingerSearch" do
	output_port('angle_to_pinger', '/base/Angle').
		doc('angle to pinger')
end

task_context "AsvNavigation" do
      operation('addWaypoint').
        argument('x','double','x').
        argument('y','double','y')
        
      operation('clearWaypoints')
end

task_context "WhiteLight" do
  property('interval_mode','int').
    doc('0=no interval (manually switching), 1=constant interval, 2=random interval')
  property('constantInterval','int').
    doc('in ms')
  property('randomInterval_min','int').
    doc('in ms')
  property('randomInterval_max','int').
    doc('in ms')
  operation('switchLight').
    doc('switch light on or off. Only works in interval_mode=0.')
end

task_context "Modem" do
      property("sendInterval","double",2.0)

      input_port("light_value", "/bool").
        doc("indicates current light-value from nurc")

      input_port("position_samples", "/base/samples/RigidBodyState").
        doc("current position of the vehicle transmitted to Nurc")

      output_port("motion_command", "/base/AUVMotionCommand").
        doc("motion command submitted by the nurc for buoy heading with zero speed")
end


deployment "AvalonSimulation" do
	task('avalon_simulation', 'simulation::Mars').
	    periodic(0.1)
	    
	task('imu', "simulation::MarsIMU").
	    periodic(0.1)
	task('mic', "Microphones").
	    periodic(1)
	task("sonar","simulation::Sonar").
		periodic 0.066666
	task("sonar_rear","simulation::Sonar").
		periodic 0.066666
#        task("state_estimator","StateEstimator").
#            periodic 0.01
        task("pingersearch_simulation","PingerSearch").
          periodic 1.0
        task("asv_navigation","AsvNavigation").
          periodic 0.5
        task("avalon_actuators","simulation::AuvMotion").
          periodic 0.5
        task("asv_actuators","simulation::Actuators").
          periodic 0.5
        task("test_vehicle_actuators","simulation::Actuators").
          periodic 0.5
        task("ground_distance","simulation::MarsAltimeter").
          periodic 0.5
	task("white_light", "WhiteLight")
        task("bottom_camera","simulation::MarsCamera").
            periodic 0.1
        task("front_camera","simulation::MarsCamera").
            periodic 0.1
        task("top_camera","simulation::MarsCamera").
            periodic 0.1

        task("joystick", "controldev::JoystickTask")
        task("fake_writer", "avalon_control::FakeWriter")
        task("rel_fake_writer", "avalon_control::RelFakeWriter")
        
        task("rel_controller", "auv_rel_pos_controller::Task")
        
        task("motion_control", "avalon_control::MotionControlTask")
        task("position_control", "avalon_control::PositionControlTask")

        task("controlconverter_movement","raw_control_command_converter::Movement")

        task("controlconverter_position","raw_control_command_converter::Position")

        task("waypoint_navigator", "auv_control::WaypointNavigator").
            periodic(0.01)

        task("world_to_aligned", "auv_control::WorldToAligned").
            periodic(0.01)

        task("aligned_position_controller", "auv_control::PIDController").
            periodic(0.01)

        task("aligned_velocity_controller", "auv_control::PIDController").
            periodic(0.01)

        task("aligned_to_body", "auv_control::AlignedToBody").
            periodic(0.01)

        task("acceleration_controller", "auv_control::AccelerationController").
            periodic(0.01)

        task "pipeline_follower", "offshore_pipeline_detector::Task"
        task "wall_servoing", "wall_servoing::SingleSonarServoing"
        task "sonar_feature_estimator", "sonar_feature_estimator::Task"
        task "sonar_wall_hough", "sonar_wall_hough::Task"
        task "uw_particle_localization", "uw_particle_localization::Task"
        task("auv_waypoint_navigator", "auv_waypoint_navigator::Task").
                periodic(0.01)
        task "asv_detector", "asv_detector::Task"
        
        task('buoy_detector', 'buoy::Detector')
        task('buoy_servoing', 'buoy::Survey')
        
        task("angle_estimation", "pingersearch::AngleEstimation")
        task("pinger_search", "pingersearch::PingerSearch")

        add_default_logger.
            periodic(0.01)
end

deployment "AvalonSimulationScheduled" do
        createTaskScheduler 

	schedule task('avalon_simulation', 'simulation::Mars')
        schedule task('trigger','simulation::MarsTrigger')
	schedule task('imu', "simulation::MarsIMU")
	schedule task('mic', "Microphones")
	schedule task("sonar","simulation::Sonar")
	schedule task("sonar_rear","simulation::Sonar")
        schedule task("pingersearch_simulation","PingerSearch")
        schedule task("asv_navigation","AsvNavigation")
        schedule task("avalon_actuators","simulation::AuvMotion")
        schedule task("asv_actuators","simulation::Actuators")
        schedule task("test_vehicle_actuators","simulation::Actuators")
        schedule task("ground_distance","simulation::MarsAltimeter")
	schedule task("white_light", "WhiteLight")
        schedule task("bottom_camera","simulation::MarsCamera")
        schedule task("front_camera","simulation::MarsCamera")
        schedule task("top_camera","simulation::MarsCamera")
        schedule task("joystick", "controldev::JoystickTask")
        schedule task("fake_writer", "avalon_control::FakeWriter")
        schedule task("rel_fake_writer", "avalon_control::RelFakeWriter")
        schedule task("rel_controller", "auv_rel_pos_controller::Task")
        schedule task("motion_control", "avalon_control::MotionControlTask")
        schedule task("position_control", "avalon_control::PositionControlTask")
        schedule task("controlconverter_movement","raw_control_command_converter::Movement")
        schedule task("controlconverter_position","raw_control_command_converter::Position")
        schedule task "pipeline_follower", "offshore_pipeline_detector::Task"
        schedule task "wall_servoing", "wall_servoing::SingleSonarServoing"
        schedule task "sonar_feature_estimator", "sonar_feature_estimator::Task"
        schedule task "sonar_wall_hough", "sonar_wall_hough::Task"
        schedule task "uw_particle_localization", "uw_particle_localization::Task"
        schedule task("auv_waypoint_navigator", "auv_waypoint_navigator::Task")
        schedule task "asv_detector", "asv_detector::Task"
        schedule task('buoy_detector', 'buoy::Detector')
        schedule task('buoy_servoing', 'buoy::Survey')
        schedule task("angle_estimation", "pingersearch::AngleEstimation")
        schedule task("pinger_search", "pingersearch::PingerSearch")

        #add_default_logger.
        #    periodic(0.01)
end

