name 'avalon_simulation'
version '0.1'

import_types_from 'base'
import_types_from "avalon_base"
using_library "mars_utils", :typekit => false
using_library "mars_interfaces", :typekit => false
using_library 'avalon-plugin'
using_library 'marsusim'
using_library 'mars_sim'
using_task_library 'simulation'

task_context "Task" do
	subclasses "simulation::Mars"
	property('scenefile', '/std/string',"#{ENV['AUTOPROJ_PROJECT_BASE']}/simulation/orogen/avalon_simulation/configuration/avalon.scn").
		doc('scenefile of the robot module, which should be loaded')

        #at the moment without gui is not support !!!!       
	property('with_manipulator_gui', 'bool',true).
		doc('scenefile of the robot module, which should be loaded')

        property('initial_x', 'double', 0.0)
        property('initial_y', 'double', 0.0)
        property('initial_z', 'double', 0.0)
        property('initial_yaw', 'double', 0.0)
        property('debug_sonar', 'bool',0)
        
        #osgOcean Part:
        property('use_osg_ocean', 'bool',0)
        property('waveScale','double')
        property('windSpeed','double')
        property('endlessOcean','bool')
        property('oceanHeight','double')
        property('goodRays','bool')
        property('silt','bool')
        property('glare','bool')
        property('glareThreashold','double')
        property('distortion','bool')
        property('scattering','bool')
        property('fogDensity','double')
        property('fogColor','/base/Vector4d')
        property('diffuse','/base/Vector4d')
        property('attenuation','/base/Vector3d')
        
        
        
        property('remove_buoy','bool')


        output_port('auv_position', '/base/Vector3d')

        #sets the position of the auv
        operation('setPosition').
            returns('bool').
            argument('x','double','x').
            argument('y','double','y').
            argument('z','double','z')

        #sets the position of the auv
        operation('setOrientation').
            returns('bool').
            argument('x','double','x').
            argument('y','double','y').
            argument('z','double','z').
            argument('w','double','w')

        operation('setYaw').
            returns('bool').
            argument('yaw', 'double', 'yaw')
            
        operation('setPipelinePosition').
          argument('x','double','x').
          argument('y','double','y').
          argument('z','double','z')
end

task_context "Microphones" do
	subclasses "simulation::MarsPlugin"
	
	
    output_port "stereo_output", "/avalon/AudioSamples"
    output_port "ping_output", "/avalon/AudioSamples"

    property("sound_velocity","double",1500).
        doc("Current Setting of sound_velocity")
    
    property("pinger_frequency","double",12000).
        doc("Current Setting of pinger frequency in Hz")
        
    property("white_noise","bool", true).
        doc("insert white noise in pinger signal")
        
    property("noise_amplitude","double", 0.4).
        doc("changes amplitude of the white noise")
    
    property("base_line","double",1.5).
        doc("Distance between the microphones")
        
    property("sample_rate","double", 44100.0).
        doc("sample rate for signal")           

    property('node_name', '/std/string', 'avalon').
	    doc('name of the nodein the scene file, which should be handled as a acoustinc target')

    property('angle_offset',"base::Angle")

end

task_context "StateEstimator" do
	needs_configuration
	property('node_name','std/string')
		doc 'name of the vehicle in the scene file'
	output_port('pose_samples', '/base/samples/RigidBodyState').
		doc('computed position in m, in the Simulation coordinate system')
end

task_context "PingerSearch" do
	output_port('angle_to_pinger', '/base/Angle').
		doc('angle to pinger')
end

task_context "AsvNavigation" do
      operation('addWaypoint').
        argument('x','double','x').
        argument('y','double','y')
        
      operation('clearWaypoints')
end

task_context "WhiteLight" do
  property('interval_mode','int').
    doc('0=no interval (manually switching), 1=constant interval, 2=random interval')
  property('constantInterval','int').
    doc('in ms')
  property('randomInterval_min','int').
    doc('in ms')
  property('randomInterval_max','int').
    doc('in ms')
  operation('switchLight').
    doc('switch light on or off. Only works in interval_mode=0.')
end

task_context "Modem" do
      property("sendInterval","double",2.0)

      input_port("light_value", "/bool").
        doc("indicates current light-value from nurc")

      input_port("position_samples", "/base/samples/RigidBodyState").
        doc("current position of the vehicle transmitted to Nurc")

      output_port("motion_command", "/base/AUVMotionCommand").
        doc("motion command submitted by the nurc for buoy heading with zero speed")
end

deployment "AvalonSimulation" do
	# !!!! Currently these deployments are not being installed! Use avalon/orogen/avalon_simulation_deployment instead !!!!
        #do_not_install

	task('avalon_simulation', 'avalon_simulation::Task').
	    periodic(0.1)
	task('mic', "Microphones").
	    periodic(1)
	task("sonar","simulation::Sonar").
		periodic 0.066666
	task("sonar_rear","simulation::Sonar").
		periodic 0.066666
        task("state_estimator","StateEstimator").
            periodic 0.01
        task("pingersearch_simulation","PingerSearch").
          periodic 1.0
        task("asv_navigation","AsvNavigation").
          periodic 0.5
        task("avalon_actuators","simulation::Actuators").
          periodic 0.5
        task("asv_actuators","simulation::Actuators").
          periodic 0.5
        task("test_vehicle_actuators","simulation::Actuators").
          periodic 0.5
	task("white_light", "WhiteLight")
        task("bottom_camera","simulation::MarsCamera").
            periodic 0.1
        task("front_camera","simulation::MarsCamera").
            periodic 0.1
        task("top_camera","simulation::MarsCamera").
            periodic 0.1

	add_default_logger
end

